#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")

#@ base_parts = data.values.scaffold.base_url.split("//")
#@ base_protocol = base_parts[0][:-1]
#@ base_host_port = base_parts[1]
#@ base_host, base_port = base_host_port.split(":")
#@ base_port = int(base_port)

#@ def node_config(node_type):
type: #@ node_type
manager_host: scaffold-manager
manager_port: #@ base_port
join_key: #@ data.values.scaffold.nodes.keys.join
primary_key: #@ data.values.scaffold.nodes.keys.primary
manager_protocol: #@ base_protocol
#@ end

#@ def admin_config():
username: #@ data.values.scaffold.admin.username
password: #@ data.values.scaffold.admin.password
#@ end

#@ def filestore_config():
access_key: #@ data.values.filestore.credentials.access_key
secret_key: #@ data.values.filestore.credentials.secret_key
host: #@ data.values.filestore.connection.host
port: #@ data.values.filestore.connection.port
bucket: #@ data.values.filestore.connection.bucket
region: #@ data.values.filestore.connection.region
protocol: #@ data.values.filestore.connection.protocol
#@ end

#@ def reset_config():
email: #@ data.values.scaffold.reset.email
password: #@ data.values.scaffold.reset.password
mail_host: #@ data.values.scaffold.reset.host
mail_port: #@ data.values.scaffold.reset.port
#@ end

---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-filestore
  namespace: #@ data.values.scaffold.namespace
data:
  config: #@ base64.encode(json.encode(filestore_config()))
  access_key: #@ base64.encode(data.values.filestore.credentials.access_key)
  secret_key: #@ base64.encode(data.values.filestore.credentials.secret_key)
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-document-store
  namespace: #@ data.values.scaffold.namespace
type: Opaque
data:
  config: #@ base64.encode(data.values.document_store.connection_string)
  username: #@ base64.encode(data.values.document_store.container.username)
  password: #@ base64.encode(data.values.document_store.container.password)
  admin_password: #@ base64.encode(data.values.document_store.container.admin_password)
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-reset
  namespace: #@ data.values.scaffold.namespace
type: Opaque
data:
  config: #@ base64.encode(json.encode(reset_config()))
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-admin
  namespace: #@ data.values.scaffold.namespace
type: Opaque
data:
  config: #@ base64.encode(json.encode(admin_config()))
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-manager
  namespace: #@ data.values.scaffold.namespace
data:
  config: #@ base64.encode(json.encode(node_config("manager")))
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-worker
  namespace: #@ data.values.scaffold.namespace
data:
  config: #@ base64.encode(json.encode(node_config("worker")))

#@ if data.values.scaffold.tls.enabled:
---
apiVersion: v1
kind: Secret
metadata:
  name: scaffold-manager-tls
  namespace: #@ data.values.scaffold.namespace
data:
  cert.crt: #@ data.values.scaffold.nodes.manager.crt
  cert.key: #@ data.values.scaffold.nodes.manager.key
#@ for idx in range(0, data.values.scaffold.nodes.workers.count):
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "scaffold-worker-{}-tls".format(idx)
  namespace: #@ data.values.scaffold.namespace
data:
  cert.crt: #@ data.values.scaffold.nodes.workers.certs[idx].crt
  cert.key: #@ data.values.scaffold.nodes.workers.certs[idx].key
#@ end
#@ end
