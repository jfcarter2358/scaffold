#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")

#@ base_parts = data.values.scaffold.base_url.split("//")
#@ base_protocol = base_parts[0]
#@ base_host_port = base_parts[1]
#@ base_host, base_port = base_host_port.split(":")
#@ base_port = int(base_port)
---
apiVersion: v1
kind: Service
metadata:
  name: bulwark
  namespace: #@ data.values.scaffold.namespace
  labels:
    app: bulwark
  annotations:
    kapp.k14s.io/change-group: "apps.johnfcarter.tech/scaffold-manager"
    #@ if data.values.document_store.container.enabled:
    kapp.k14s.io/change-rule.document-store: "upsert after upserting apps.johnfcarter.tech/document-store"
    #@ end
    #@ if data.values.filestore.container.enabled:
    kapp.k14s.io/change-rule.file-store: "upsert after upserting apps.johnfcarter.tech/file-store"
    #@ end
    kapp.k14s.io/disable-wait: ""
spec:
  selector:
    app: scaffold-manager
  ports:
    - name: http
      port: #@ base_port
      targetPort: #@ base_port
      protocol: TCP
    - name: ws
      port: #@ data.values.scaffold.service.ws_port
      targetPort: #@ data.values.scaffold.service.ws_port
  type: #@ data.values.scaffold.service.type
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scaffold-manager
  namespace: #@ data.values.scaffold.namespace
  labels:
    app: scaffold-manager
  annotations:
    kapp.k14s.io/change-group: "apps.johnfcarter.tech/scaffold-manager"
    #@ if data.values.document_store.container.enabled:
    kapp.k14s.io/change-rule.document-store: "upsert after upserting apps.johnfcarter.tech/document-store"
    #@ end
    #@ if data.values.filestore.container.enabled:
    kapp.k14s.io/change-rule.file-store: "upsert after upserting apps.johnfcarter.tech/file-store"
    #@ end
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scaffold-manager
  template:
    metadata:
      labels:
        app: scaffold-manager
    spec:
      #@ if data.values.k8s.image_pull_secret.enabled:
      imagePullSecrets:
      -  name: scaffold-regcred
      #@ end
      #@ if data.values.scaffold.tls.enabled:
      volumes:
      - name: tls-volume
        secret:
          secretName: scaffold-manager-tls
      #@ end
      containers:
      - name: scaffold
        imagePullPolicy: #@ data.values.k8s.image_pull_policy
        image: #@ data.values.scaffold.image
        env:
        - name: SCAFFOLD_BASE_URL
          value: #@ data.values.scaffold.base_url
        - name: SCAFFOLD_WS_PORT
          value: #@ "{}".format(data.values.scaffold.service.ws_port)
        - name: SCAFFOLD_LOG_LEVEL
          value: #@ data.values.scaffold.logging.level
        - name: SCAFFOLD_LOG_FORMAT
          value: #@ data.values.scaffold.logging.format
        - name: SCAFFOLD_ADMIN
          valueFrom:
            secretKeyRef:
              name: scaffold-admin
              key: config
        - name: SCAFFOLD_DB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: scaffold-document-store
              key: config
        - name: SCAFFOLD_NODE
          valueFrom:
            secretKeyRef:
              name: scaffold-manager
              key: config
        - name: SCAFFOLD_HEARTBEAT_INTERVAL
          value: #@ "{}".format(data.values.scaffold.heartbeat.interval)
        - name: SCAFFOLD_HEARTBEAT_BACKOFF
          value: #@ "{}".format(data.values.scaffold.heartbeat.backoff)
        - name: SCAFFOLD_RESET
          valueFrom:
            secretKeyRef:
              name: scaffold-reset
              key: config
        - name: SCAFFOLD_FILESTORE
          valueFrom:
            secretKeyRef:
              name: scaffold-filestore
              key: config
        - name: SCAFFOLD_TLS_ENABLED
          value: #@ "{}".format(data.values.scaffold.tls.enabled)
        - name: SCAFFOLD_TLS_SKIP_VERIFY
          value: #@ "{}".format(data.values.scaffold.tls.skip_verify)
        #@ if data.values.scaffold.nodes.manager.env:
          #@ for name in data.values.scaffold.nodes.manager.env:
        - name: #@ name
          value: #@ data.values.scaffold.nodes.manager.env[name]
          #@ end
        #@ end
        #@ if data.values.scaffold.tls.enabled:
        volumeMounts:
        - name: tls-volume
          readOnly: true
          mountPath: "/tmp/certs"
        #@ end
#@ for idx in range (0, data.values.scaffold.nodes.workers.count):
---
apiVersion: v1
kind: Service
metadata:
  name: #@ "scaffold-worker-{}".format(idx)
  namespace: #@ data.values.scaffold.namespace
  labels:
    app: #@ "scaffold-worker-{}".format(idx)
  annotations:
    kapp.k14s.io/change-group: "apps.johnfcarter.tech/scaffold-worker"
    kapp.k14s.io/change-rule: "upsert after upserting apps.johnfcarter.tech/scaffold-manager"
spec:
  selector:
    app: #@ "scaffold-worker-{}".format(idx)
  ports:
    - name: http
      port: #@ base_port + idx + 1
      targetPort: #@ base_port + idx + 1
      protocol: TCP
    - name: ws
      port: #@ data.values.scaffold.service.ws_port + 1 + idx
      targetPort: #@ data.values.scaffold.service.ws_port + 1 + idx
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ "scaffold-worker-{}".format(idx)
  namespace: #@ data.values.scaffold.namespace
  labels:
    app: #@ "scaffold-worker-{}".format(idx)
  annotations:
    kapp.k14s.io/change-group: "apps.johnfcarter.tech/scaffold-worker"
    kapp.k14s.io/change-rule: "upsert after upserting apps.johnfcarter.tech/scaffold-manager"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: #@ "scaffold-worker-{}".format(idx)
  template:
    metadata:
      labels:
        app: #@ "scaffold-worker-{}".format(idx)
    spec:
      #@ if data.values.k8s.image_pull_secret.enabled:
      imagePullSecrets:
      -  name: scaffold-regcred
      #@ end
      volumes:
      - name: dev-tun
        hostPath:
          path: "/dev/net/tun"
          type: CharDevice
      #@ if data.values.scaffold.tls.enabled:
      - name: tls-volume
        secret:
          secretName: #@ "scaffold-worker-{}-tls".format(idx)
      #@ end
      containers:
      - name: scaffold
        imagePullPolicy: #@ data.values.k8s.image_pull_policy
        image: #@ data.values.scaffold.image
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        env:
        - name: SCAFFOLD_BASE_URL
          #@ if data.values.scaffold.tls.enabled:
          value: #@ "https://scaffold-worker-{}:{}".format(idx, base_port + 1 + idx)
          #@ else:
          value: #@ "http://scaffold-worker-{}:{}".format(idx, base_port + 1 + idx)
          #@ end
        - name: SCAFFOLD_WS_PORT
          value: #@ "{}".format(data.values.scaffold.service.ws_port + 1 + idx)
        - name: SCAFFOLD_LOG_LEVEL
          value: #@ data.values.scaffold.logging.level
        - name: SCAFFOLD_LOG_FORMAT
          value: #@ data.values.scaffold.logging.format
        - name: SCAFFOLD_ADMIN
          valueFrom:
            secretKeyRef:
              name: scaffold-admin
              key: config
        - name: SCAFFOLD_DB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: scaffold-document-store
              key: config
        - name: SCAFFOLD_NODE
          valueFrom:
            secretKeyRef:
              name: scaffold-worker
              key: config
        - name: SCAFFOLD_HEARTBEAT_INTERVAL
          value: #@ "{}".format(data.values.scaffold.heartbeat.interval)
        - name: SCAFFOLD_HEARTBEAT_BACKOFF
          value: #@ "{}".format(data.values.scaffold.heartbeat.backoff)
        - name: SCAFFOLD_RESET
          valueFrom:
            secretKeyRef:
              name: scaffold-reset
              key: config
        - name: SCAFFOLD_FILESTORE
          valueFrom:
            secretKeyRef:
              name: scaffold-filestore
              key: config
        - name: SCAFFOLD_TLS_ENABLED
          value: #@ "{}".format(data.values.scaffold.tls.enabled)
        - name: SCAFFOLD_TLS_SKIP_VERIFY
          value: #@ "{}".format(data.values.scaffold.tls.skip_verify)
        #@ if data.values.scaffold.nodes.workers.env:
          #@ for name in data.values.scaffold.nodes.workers.env[idx]:
        - name: #@ name
          value: #@ data.values.scaffold.nodes.workers.env[idx][name]
          #@ end
        #@ end
        volumeMounts:
        - name: dev-tun
          mountPath: "/dev/net/tun"
        #@ if data.values.scaffold.tls.enabled:
        - name: tls-volume
          readOnly: true
          mountPath: "/tmp/certs"
        #@ end
#@ end
